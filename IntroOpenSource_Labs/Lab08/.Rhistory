2+3
2+3
4+5/6
sqrt(2)
sqrt(6)
sqrt(12)
6^(1/3)
3^(1/3)
require(graphics)
dotchart(precip[order(precip)], main = "precip data")
precip[1:10]
require(graphics)
dotchart(precip[order(precip)], main = "precip data")
require(graphics)
dotchart(precip[order(precip)], main = "precip data")
title(sub = "Average annual precipitation (in.)")
mean(precip)
which.max(precip)
library(prob)
tosscoin(1)
with(prob)
sample(0:1,15,rep=T)
sample(0:1,15,rep=T)
sample(0:5,15,rep=T)
hist(sample(0:5,15,rep=T)
hist(sample(0:5,15,rep=T)
hist(sample(0:5,15,rep=T))
hist(sample(0:5,15,rep=T))
hist(sample(0:5,100,rep=T))
hist(sample(0:5,1000,rep=T))
hist(sample(0:5,10000,rep=T))
hist(sample(0:1,10000,rep=T))
hist(sample(0:10,10000,rep=T))
hist(sample(0:10,10000,rep=T))
hist(sample(0:10,10000,rep=T))
hist(sample(0:10,100000,rep=T))
hist(sample(0:10,1000000,rep=T))
hist(sample(0:10,10000000,rep=T))
hist(sample(0:10,10000,rep=T))
hist(sample(0:10,100,rep=T))
hist(sample(0:10,10,rep=T))
hist(sample(0:10,10,rep=T))
hist(sample(0:10,10,rep=T))
hist(sample(0:10,10,rep=T))
str(admissions)
source('~/.active-rstudio-document', echo=TRUE)
str(admissions)
rules <- apriori(admissions,  parameter = list(minlen=2, supp=0.01, conf=0.8),appearance = list(rhs=c("admit=1", "admit=0"),default="lhs"),control = list(verbose=F))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("arules")
source('~/.active-rstudio-document', echo=TRUE)
str(admissions)
str(admissions)
setwd('C:\\CMS\\RPI\\2016_Fall_Semester\\OpenSource\\slegec\\IntroOpenSource_Labs\\Lab08')
setwd('C:\\CMS\\RPI\\2016_Fall_Semester\\OpenSource\\slegec\\IntroOpenSource_Labs\\Lab08')
admissions <- read.csv("binary.csv",head=TRUE,sep=",")
col_names <- names(admissions)
admissions[,col_names] <- lapply(admissions[,col_names] , factor)
library(arules)
rules <- apriori(admissions,parameter = list(minlen=2,supp=0.005,conf=0.8),appearance=list(rhs=c("admit=1"),lhs=c("rank=1","rank=2","rank=3","rank=4"),default="lhs"))
quality(rules)<-round(quality(rules),digits=3)
rules.sorted <- sort(rules,by="lift")
inspect(rules.sorted)
subset.matrix <- is.subset(rules.sorted, rules.sorted)
subset.matrix[lower.tri(subset.matrix, diag=T)] <- NA
redundant <- colSums(subset.matrix, na.rm=T) >= 1
which(redundant)
rules.pruned <- rules.sorted[!redundant]
inspect(rules.pruned)
library(arulesViz)
plot(rules,method = "graph", control=list(type="items"))
str(admissions)
str(admissions)
col_names <- names(admissions)
admissions[,col_names] <- lapply(admissions[,col_names] , factor)
library(arules)
library(arulesViz)
# Generate rules using apriori()
.all <- apriori(admissions, parameter=list(support=0.01, confidence=0.5))
inspect(.all)
# Rules when when people are admitted
.all <- apriori(admissions,
parameter = list(support=0.01, confidence=0.5),
appearance = list(rhs = c("admit=1"), default="lhs"))
# Keep to three decimal places
quality(rules.all) <- round(quality(rules.all), digits = 3)
source('C:/CMS/RPI/2016_Fall_Semester/OpenSource/slegec/IntroOpenSource_Labs/Lab08/Lab08_2.R', echo=TRUE)
# Generate rules using apriori()
.all <- apriori(admissions, parameter=list(support=0.01, confidence=0.5))
inspect(.all)
# Rules when when people are admitted
.all <- apriori(admissions,
parameter = list(support=0.01, confidence=0.5),
appearance = list(rhs = c("admit=1"), default="lhs"))
# Keep to three decimal places
quality(rules.all) <- round(quality(rules.all), digits = 3)
# Remove redundant rules
subset.matrix <- is.subset(rules.all, rules.all)
subset.matrix[lower.tri(subset.matrix, diag = T)] <- NA
redundant <- colSums(subset.matrix, na.rm = T) >= 1
rules.pruned <- rules.all[!redundant]
inspect(rules.pruned)
# Visulize the rules
#plot(rules.all)
# plot(rules.all, method = "grouped")
# plot(rules.all, method = "graph")
# Rules when people are not admitted
rules.all <- apriori(admissions,
parameter = list(support=0.01, confidence=0.5),
appearance = list(rhs = c("admit=0"), default="lhs"))
inspect(rules.all)
str(admissions)
col_names <- names(admissions)
admissions[,col_names] <- lapply(admissions[,col_names] , factor)
library(arules)
library(arulesViz)
# Generate rules using apriori()
.all <- apriori(admissions, parameter=list(support=0.01, confidence=0.5))
inspect(.all)
# Rules when when people are admitted
.all <- apriori(admissions,
parameter = list(support=0.01, confidence=0.5),
appearance = list(rhs = c("admit=1"), default="lhs"))
# Keep to three decimal places
quality(rules.all) <- round(quality(rules.all), digits = 3)
# Remove redundant rules
subset.matrix <- is.subset(rules.all, rules.all)
subset.matrix[lower.tri(subset.matrix, diag = T)] <- NA
redundant <- colSums(subset.matrix, na.rm = T) >= 1
rules.pruned <- rules.all[!redundant]
inspect(rules.pruned)
# Visulize the rules
#plot(rules.all)
# plot(rules.all, method = "grouped")
# plot(rules.all, method = "graph")
# Rules when people are not admitted
rules.all <- apriori(admissions,
parameter = list(support=0.01, confidence=0.5),
appearance = list(rhs = c("admit=0"), default="lhs"))
inspect(rules.all)
library(arules)
rm(list=ls())
setwd("/Users/hassanalshehri/Google Drive/RPI/Open_Software/myRepo/Lab08")
getwd()
admissions <- read.table("binary.csv", header = TRUE, sep = "," )
col_names <- names(admissions)
admissions[,col_names] <- lapply(admissions[,col_names] , factor)
str(admissions)
summary(admissions)
head(admissions)
rules <- apriori(admissions,  parameter = list(minlen=2, supp=0.01, conf=0.02),
appearance = list(rhs=c("admit=1"),
default="lhs"),
control = list(verbose=F))
rules.sorted <- sort(rules, by="confidence")
inspect(rules.sorted)
library(arulesViz)
plot(rules.sorted)
plot(rules.sorted, method="grouped")
plot(rules.sorted, method="graph")
plot(rules.sorted, method="graph", control=list(type="items"))
library(arules)
rm(list=ls())
setwd("C:\\CMS\\RPI\\2016_Fall_Semester\\OpenSource\slegec\\IntroOpenSource_Labs\\Lab08")
getwd()
admissions <- read.table("binary.csv", header = TRUE, sep = "," )
col_names <- names(admissions)
admissions[,col_names] <- lapply(admissions[,col_names] , factor)
str(admissions)
summary(admissions)
head(admissions)
rules <- apriori(admissions,  parameter = list(minlen=2, supp=0.01, conf=0.02),
appearance = list(rhs=c("admit=1"),
default="lhs"),
control = list(verbose=F))
rules.sorted <- sort(rules, by="confidence")
inspect(rules.sorted)
library(arulesViz)
plot(rules.sorted)
plot(rules.sorted, method="grouped")
plot(rules.sorted, method="graph")
plot(rules.sorted, method="graph", control=list(type="items"))
library(arules)
rm(list=ls())
setwd("C:\\CMS\\RPI\\2016_Fall_Semester\\OpenSource\slegec\\IntroOpenSource_Labs\\Lab08")
getwd()
admissions <- read.table("binary.csv", header = TRUE, sep = "," )
col_names <- names(admissions)
admissions[,col_names] <- lapply(admissions[,col_names] , factor)
str(admissions)
summary(admissions)
head(admissions)
rules <- apriori(admissions,  parameter = list(minlen=3, supp=0.01, conf=0.02),
appearance = list(rhs=c("admit=1"),
default="lhs"),
control = list(verbose=F))
rules.sorted <- sort(rules, by="confidence")
inspect(rules.sorted)
library(arulesViz)
plot(rules.sorted)
plot(rules.sorted, method="grouped")
plot(rules.sorted, method="graph")
plot(rules.sorted, method="graph", control=list(type="items"))
library(arules)
rm(list=ls())
setwd("C:\\CMS\\RPI\\2016_Fall_Semester\\OpenSource\slegec\\IntroOpenSource_Labs\\Lab08")
getwd()
admissions <- read.table("binary.csv", header = TRUE, sep = "," )
col_names <- names(admissions)
admissions[,col_names] <- lapply(admissions[,col_names] , factor)
str(admissions)
summary(admissions)
head(admissions)
rules <- apriori(admissions,  parameter = list(minlen=1, supp=0.01, conf=0.02),
appearance = list(rhs=c("admit=1"),
default="lhs"),
control = list(verbose=F))
rules.sorted <- sort(rules, by="confidence")
inspect(rules.sorted)
library(arulesViz)
plot(rules.sorted)
plot(rules.sorted, method="grouped")
plot(rules.sorted, method="graph")
plot(rules.sorted, method="graph", control=list(type="items"))
library(arules)
rm(list=ls())
setwd("C:\\CMS\\RPI\\2016_Fall_Semester\\OpenSource\slegec\\IntroOpenSource_Labs\\Lab08")
getwd()
admissions <- read.table("binary.csv", header = TRUE, sep = "," )
col_names <- names(admissions)
admissions[,col_names] <- lapply(admissions[,col_names] , factor)
str(admissions)
summary(admissions)
head(admissions)
rules <- apriori(admissions,  parameter = list(minlen=2, supp=0.01, conf=0.02),
appearance = list(rhs=c("admit=1"),
default="lhs"),
control = list(verbose=F))
rules.sorted <- sort(rules, by="confidence")
inspect(rules.sorted)
library(arulesViz)
plot(rules.sorted)
plot(rules.sorted, method="grouped")
plot(rules.sorted, method="graph")
plot(rules.sorted, method="graph", control=list(type="items"))
library(arules)
rm(list=ls())
setwd("C:\\CMS\\RPI\\2016_Fall_Semester\\OpenSource\slegec\\IntroOpenSource_Labs\\Lab08")
getwd()
admissions <- read.table("binary.csv", header = TRUE, sep = "," )
col_names <- names(admissions)
admissions[,col_names] <- lapply(admissions[,col_names] , factor)
str(admissions)
summary(admissions)
head(admissions)
rules <- apriori(admissions,  parameter = list(minlen=2, supp=0.06, conf=0.2),
appearance = list(rhs=c("admit=1"),
default="lhs"),
control = list(verbose=F))
rules.sorted <- sort(rules, by="confidence")
inspect(rules.sorted)
library(arulesViz)
plot(rules.sorted)
plot(rules.sorted, method="grouped")
plot(rules.sorted, method="graph")
plot(rules.sorted, method="graph", control=list(type="items"))
default="lhs"),
library(arules)
rm(list=ls())
setwd("C:\\CMS\\RPI\\2016_Fall_Semester\\OpenSource\slegec\\IntroOpenSource_Labs\\Lab08")
getwd()
admissions <- read.table("binary.csv", header = TRUE, sep = "," )
col_names <- names(admissions)
admissions[,col_names] <- lapply(admissions[,col_names] , factor)
str(admissions)
summary(admissions)
head(admissions)
rules <- apriori(admissions,  parameter = list(minlen=2, supp=0.01, conf=0.02),
appearance = list(rhs=c("admit=1"),
default="lhs"),
control = list(verbose=F))
rules.sorted <- sort(rules, by="confidence")
inspect(rules.sorted)
library(arulesViz)
plot(rules.sorted)
plot(rules.sorted, method="grouped")
plot(rules.sorted, method="graph")
plot(rules.sorted, method="graph", control=list(type="items"))
library(arules)
rm(list=ls())
setwd("C:\\CMS\\RPI\\2016_Fall_Semester\\OpenSource\slegec\\IntroOpenSource_Labs\\Lab08")
getwd()
admissions <- read.table("binary.csv", header = TRUE, sep = "," )
col_names <- names(admissions)
admissions[,col_names] <- lapply(admissions[,col_names] , factor)
str(admissions)
summary(admissions)
head(admissions)
rules <- apriori(admissions,  parameter = list(minlen=2, supp=0.01, conf=0.02),
appearance = list(rhs=c("admit=1"),
default="lhs"),
control = list(verbose=F))
rules.sorted <- sort(rules, by="confidence")
inspect(rules.sorted)
library(arulesViz)
plot(rules.sorted)
plot(rules.sorted, method="grouped")
plot(rules.sorted, method="graph")
//plot(rules.sorted, method="graph", control=list(type="items"))
library(arules)
rm(list=ls())
setwd("C:\\CMS\\RPI\\2016_Fall_Semester\\OpenSource\slegec\\IntroOpenSource_Labs\\Lab08")
getwd()
admissions <- read.table("binary.csv", header = TRUE, sep = "," )
col_names <- names(admissions)
admissions[,col_names] <- lapply(admissions[,col_names] , factor)
str(admissions)
summary(admissions)
head(admissions)
rules <- apriori(admissions,  parameter = list(minlen=2, supp=0.01, conf=0.02),
appearance = list(rhs=c("admit=1"),
default="lhs"),
control = list(verbose=F))
rules.sorted <- sort(rules, by="confidence")
inspect(rules.sorted)
library(arulesViz)
plot(rules.sorted)
plot(rules.sorted, method="grouped")
plot(rules.sorted, method="graph")
#plot(rules.sorted, method="graph", control=list(type="items"))
library(arules)
rm(list=ls())
setwd("C:\\CMS\\RPI\\2016_Fall_Semester\\OpenSource\slegec\\IntroOpenSource_Labs\\Lab08")
getwd()
admissions <- read.table("binary.csv", header = TRUE, sep = "," )
col_names <- names(admissions)
admissions[,col_names] <- lapply(admissions[,col_names] , factor)
str(admissions)
summary(admissions)
head(admissions)
rules <- apriori(admissions,  parameter = list(minlen=2, supp=0.01, conf=0.02),
appearance = list(rhs=c("admit=1"),
default="lhs"),
control = list(verbose=F))
rules.sorted <- sort(rules, by="confidence")
inspect(rules.sorted)
library(arulesViz)
plot(rules.sorted)
plot(rules.sorted, method="grouped")
#plot(rules.sorted, method="graph")
#plot(rules.sorted, method="graph", control=list(type="items"))
source("http://bioconductor.org/biocLite.R")
biocLite("Rgraphviz")
source("http://bioconductor.org/biocLite.R")
biocLite("Rgraphviz")
